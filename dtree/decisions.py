import random
import heapq
from sklearn import tree
import numpy


atrybuty=["czy_dom","przepelnienie","paliwo","zapelnienie_kolorem","typ_domku","czy_weekend"]
#true=1, false=0

# zbior uczacy
X =[[1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1], 
    [0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1], 
    [1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 0], 
    [0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0], 
    [0, 1, 0, 0, 1, 1], [1, 0, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1], 
    [0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1], 
    [1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], 
    [1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0], [1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 1], 
    [0, 0, 0, 1, 0, 0], [1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0], 
    [1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 1], 
    [0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0], [1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 0, 1], 
    [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0], [1, 1, 0, 1, 1, 1], 
    [0, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 1], 
    [1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], 
    [0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1], [0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1], 
    [1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1], [1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1], [1, 1, 1, 0, 1, 0], 
    [0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1], 
    [1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 0], 
    [1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1], 
    [1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1], 
    [1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0], [0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0], 
    [0, 1, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0], [0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 1], 
    [1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0], 
    [0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0], 
    [1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0], 
    [1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0], [1, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 0], 
    [0, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1], 
    [0, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0], 
    [1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0]]      

Y = [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,
     0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1,
     0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0,
     0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0]


clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, Y)

#prediction=clf.predict([[1,0,1,0,1,0]])
#print (prediction)






zapziel=0
zapzol=0
zapnieb=0


def dec_smieciarka(point,zapziel,zapnieb,zapzol):
    direction=point
    primpoint=point
    a=1
    b=-1
    mzpx=[-1,0,1]
    mzpy=[-1,0,1]
    czy_dom=0
    przepelnienie=0
    paliwo=1
    czy_weekend=0
    if zapziel==1 and zapnieb==1 and zapzol==1:
        przepelnienie=1
        zap_kol=1
    else:
        przepelnienie=0
        zap_kol=0

    dec_table=[czy_dom,przepelnienie,paliwo,zap_kol,typ_domku,czy_weekend]

    while True:
        for x in mzpx:
            for y in mzpy:
                newpoint=point[0]+(mzpx[x]),point[1]+(mzpy[y])
                if newpoint[0]>=0 and newpoint[0]<=9 and newpoint[1]>=0 and newpoint[1]<=9 and newpoint!=primpoint:
                    if tab[newpoint[0]][newpoint[1]]==3:
                        czy_dom=1
                        typ_domku=0
                        if tabtrash[newpoint[0]][newpoint[1]]>0 and przepelnienie=0:
                            if tabtrash[newpoint[0]][newpoint[1]]==1:
                                if zapziel==0:
                                    zapkol=0
                                else:
                                    zapkol=1
                                prediction=clf.predict([[dec_table]])
                                if prediction==[1]:
                                    direction=newpoint
                                    return direction
                                    break
                                else:
                                    pass
                            elif tabtrash[newpoint[0]][newpoint[1]]==2:
                                if zapnieb==0:
                                    zapkol=0
                                else:
                                    zapkol=1
                                prediction=clf.predict([[dec_table]])
                                if prediction==[1]:
                                    direction=newpoint
                                    return direction
                                    break
                                else:
                                    pass
                            elif tabtrash[newpoint[0]][newpoint[1]]==3:
                                if zapzol==0:
                                    zapkol=0
                                else:
                                    zapkol=1
                                prediction=clf.predict([[dec_table]])
                                if prediction==[1]:
                                    direction=newpoint
                                    return direction
                                    break
                                else:
                                    pass
                        else:
                            pass
                    elif tab[newpoint[0]][newpoint[1]]<0:
                        czy_dom=0
                        prediction=clf.predict([[dec_table]])
                            if prediction==[1]:
                                direction=newpoint
                                return direction
                                break
                            else:
                                pass                        
                else:
                    pass
        a=a+1
        b=b-1
        mzpx.append(a)
        mzpx.insert(0,b)
        mzpy.append(a)
        mzpy.insert(0,b)

    
kordy=dec_smieciarka(point,zapziel,zapnieb,zapzol)
print kordy


















